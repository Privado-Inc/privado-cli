name: Release Privado CLI

on:
  push:
    branches:
      - main
    tags: ["*"]

jobs:
  check-release-condition:
    name: Check release criteria
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.checkRelease.outputs.makeRelease }}
    steps: 
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: echo $(git describe --tags --abbrev=0)
      - id: checkRelease
        run: |
          echo "Testing criteria: > Run if a tag is pushed to main"
          RELEASE_BRANCH="main"
          LATEST_TAG=$(git describe --tags --abbrev=0)
          LATEST_TAG_SHA=$(git rev-parse $(git describe --tags --abbrev=0))
          BRANCH_CONTAINS_LATEST_TAG=$(git branch $RELEASE_BRANCH --contains $LATEST_TAG | cat)
          LATEST_RELEASED_TAG=$(curl --silent "https://api.github.com/repos/${{ github.repository }}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')

          # set default output
          echo "::set-output name=makeRelease::false"

          echo "Check if $RELEASE_BRANCH contains tag $LATEST_TAG"
          if [[ $BRANCH_CONTAINS_LATEST_TAG != "" ]]
          then
            echo "Found branch to contain $LATEST_TAG"
            echo "::set-output name=makeRelease::true"
          else
            echo "Tagged commit not yet part of release branch, skipping.."
          fi

          echo "Check if tag $LATEST_TAG is already released"
          if [[ $LATEST_TAG != "" && $LATEST_RELEASED_TAG == $LATEST_TAG ]]
          then
            echo "Found latest tag $LATEST_TAG to be already released"
            echo "Release criteria failed"
            echo "::set-output name=makeRelease::false"
          fi

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: check-release-condition
    if: ${{ needs.check-release-condition.outputs.release == 'true' }}
    outputs:
      tag: ${{ steps.settag.outputs.tag }}
    steps:
      - uses: actions/checkout@v2

      - name: Set release tag
        id: settag
        run: |
          echo ${{ needs.check-release-condition.outputs.release }}
          PRIVADO_RELEASE_TAG=$GITHUB_REF_NAME
          if [[ $PRIVADO_RELEASE_TAG == "latest" ]] 
          then
            PRIVADO_RELEASE_TAG=$(git describe --tags --abbrev=0)
          fi
          echo "Final Tag: $PRIVADO_RELEASE_TAG"

          echo "PRIVADO_RELEASE_TAG=$(echo -n $PRIVADO_RELEASE_TAG)" >> $GITHUB_ENV
          echo "::set-output name=tag::$PRIVADO_RELEASE_TAG"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.PRIVADO_RELEASE_TAG }}
          release_name: Privado CLI ${{ env.PRIVADO_RELEASE_TAG }}
          draft: false
          prerelease: false



  release-assets:
    name: Attach Release Assets
    runs-on: ubuntu-20.04
    needs: release
    strategy:
      matrix:
        # build and publish in parallel: linux/amd64
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goarch: arm64
            goos: windows
      
    steps:
      - uses: actions/checkout@v2
      - uses: wangyoucao577/go-release-action@v1.24
        with:
          release_tag: ${{ needs.release.outputs.tag }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.goarch }}
          project_path: "./"
          binary_name: "privado"
          goversion: "https://dl.google.com/go/go1.18.4.linux-amd64.tar.gz"
          extra_files: README.md
          asset_name: privado-${{ matrix.goos }}-${{ matrix.goarch }}
          overwrite: true
          ldflags: "-X 'github.com/Privado-Inc/privado-cli/cmd.Version=${{ needs.release.outputs.tag }}'"
